原型模式：根据现有实例创建新的对象
    1.对象种类多，无法将他们整合到一个类
    2.难以根据类生成实例
    3.想解耦框架和生成的实例
想要让生成实例的框架不再依赖与具体的类，这时不能指定类名来生成实例，而是“事先注册”一个“原型”实例，然后通过复制该实例来生成新的实例

优点：1.当创建新的对象实例较为复杂的时候，可以减化对象的创建过程，提高创建效率
      2.可以动态的增加和减少产品类
      3.原型模式提供简化的创建结构
      4.可以使用深克隆的方式保存对象的状态

缺点：1.需要对每一个类装配一个克隆方法，这个克隆方法需要对类的功能进行通盘的考虑，对于已有的类进行改造时，必须修改其源代码，违背开闭原则
      2.实现深克隆需要编写较为复杂的代码

主要角色：1.prototype抽象原型类：主要负责定义根据现有实例创建新的实例抽象方法，例如示例中的Product类
         2.ConcretePrototype具体原型类：负责现有类复制生成新的实例的方法实现，例如示例中的MessageBox类
         3.client客户类/使用者：负责使用复制实例方法生成新的实例，例如示例中的Manager类

应用案例： 在Spring中，用户也可以采用原型模式来创建新的bean实例，从而实现每次获取的是通过克隆生成的新实例，对其进行修改时对原有实例对象不造成任何影响。