1.装饰者模式又称为包装（Wrapper）。装饰模式一般是以对客户端透明的方式扩展对象的功能，是继承关系的一种替代方案。就新增功能来说，Decorator模式比生成子类更灵活。
2.角色：
    2.1 抽象构件（Component）角色：给出一个抽象接口，用以规范需要接收附加责任的对象
    2.2 具体构件（ConCreteDecorator）角色：定义一个将要接收附加责任的类
    2.3 装饰（Decorator）角色：持有一个构件（Component）对象实例，并定义一个与抽象构件接口一致的接口
    2.4 具体装饰（ConcreteDecorator）装饰者角色：负责给构件对象“贴上”附加责任
3.为什么使用装饰者而不使用继承模式？
    装饰者模式可以比继承提供更好的灵活性。装饰者模式允许动态增加或者删除一个装饰的功能，继承需要在此之前确定好对应的类，和其继承关系。
