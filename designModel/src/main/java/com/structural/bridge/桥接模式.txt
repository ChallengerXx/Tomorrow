1.桥梁模式角色：
    1.1 抽象化(Abstraction)角色：抽象化给出的定义，并保存一个实现化的引用
    1.2 修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类抽象化的定义
    1.3 实现化(Implementor)角色：这个接口给出实现化觉得的接口，不给出具体实现。这个接口不一定和抽象化觉得接口定义一致，实际上，两个接口可能非常不一致。
    实现化角色应当给出底层操作，而抽象化角色应当只给出基于底层操作更高一层的操作。
    1.4 具体实现化(Concrete Implementor)角色：这个角色给出实现化角色接口的具体实现。
2.桥接模式分析：
    理解桥接模式，重点需要理解如何将抽象化(Abstraction)和实现化(Implementor)脱耦，使得二者可以独立的变化
    2.1 抽象化：抽象化就是忽略一些信息，把不同的实体当做相同的实体对待。在面向对象中，将对象的共同性质抽取出来形成类的过程就是抽象化过程。
    2.2 实现化：针对抽象化给出的具体实现，就是实现化，抽象化与实现化是一种互逆的概念，实现化产生的对象比抽象化更具体，是对抽象化事物进行进一步的具体化。
    2.3 脱耦：脱耦是将抽象化和实现化之间的耦合解开，或者是说将它们的强关联关系改变成弱关联关系，将两个角色由继承关系改变成为关联关系。桥接模式中所谓的
    脱耦，是指一个软件系统的抽象化和实现化之间使用关联关系(组合或者是聚合关系)而不是继承关系，从而是两者相对独立的变化，这就是桥接模式的用意。
3.优点：
    3.1 分离抽象接口及实现部分
    3.2 桥接模式有时类似于多继承方案，但是多继承方案违背单一职责原则(即一个类只有一个变化原因)，复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式
    是比多继承更好的实现方案。
    3.3 桥接模式提高了系统的可扩展度，两个变化维度中任意扩展一个维度，都不需要修改原有系统
    3.4 实现细节对客户透明，可以对用户隐藏
4.缺点：
    4.1 桥接模式的引入会增加系统的理解于设计难度，由于聚合关系建立在抽象层，要求开发者针对抽象进行设计与编程
    4.2 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性。
5.适用场景：
    5.1 抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态的将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要
    对抽象化角色和实现化角色动态耦合。
    5.2 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展
    5.3 对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，使用桥接模式
    5.4 如果一个系统需要在构建抽象化角色和具现化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使他们在抽象层建立关联关系。